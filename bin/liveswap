#!/usr/bin/env node
var path = require('path')
var client = require('../client')

var args = require('optimist')
  .alias('p', 'port')
  .default('p', 3000)
  .describe('p', '<port> specify the source code to upgrade to.')

  .alias('a', 'address')
  .default('a', '127.0.0.1')
  .describe('a', '<address> specify the ip address to run on.')

  .alias('f', 'forks')
  .default('f', 2)
  .describe('f', '<number> specify how many worker processes to spawn')

  .alias('u', 'upgrade')
  .describe('u', '<path> specify the source code to upgrade to.')

  .describe('pre-upgrade', '<path> a module to handle pre upgrade logic.')
  
  .alias('k', 'kill')
  .describe('k', 'kill all forked worker processes and respawn.')

  .alias('d', 'die')
  .describe('d', 'kill all forked worker processes and quit master process.')

  .alias('m', 'message')
  .describe('m', '<message> send a message to all the forked worker processes.')

  .alias('s', 'start')
  .describe('s', '<path> start a node process cluster.')

  .alias('H', 'head')
  .describe('H', '<path> path to HEAD file')

var argv = args.argv

if (argv.h || argv.help || process.argv.length == 2) {
  console.log(args.help())
  process.exit(0)
}

var done = function(value) {
  if (value.code) {
    console.error(value)
    process.exit(1)
  }
  console.log(value)
  process.exit(0)
}

if (argv.u) {
  client.upgrade(argv.u, done)
}
else if (argv.k) {
  client.kill(argv.k, done)
}
else if (argv.d) {
  client.die(null, done);
}
else if (argv.m) {
  client.message(argv.m, done)
}
else if (argv.s) {

  var preupgrade = argv['pre-upgrade']
  if (preupgrade) {
    preupgrade = preupgrade.replace(/^\.[\\\/]/, process.cwd() + path.sep)
  }

  var opts = { 
    forks: argv.f,
    address: argv.a,
    'pre-upgrade': preupgrade,
    target: path.resolve(argv.s),
    head: argv.head
  }

  if (argv.p) {
    opts.port = argv.p
  }

  require('../index')(opts)
}
